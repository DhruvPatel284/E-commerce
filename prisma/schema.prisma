// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrederStatus{
  Pending
  Delivered
  cancelled
}

model User{
  id          String      @id @default(uuid())
  username    String?
  email       String      @unique
  password    String
  phoneno     String?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime ?   @updatedAt 
  orders      Order[]
  address     Address?
  product     Product[]
}

model Address{
  id         String       @id @default(uuid())
  address    String?
  pincode    Int?
  state      String?
  city       String?
  country    String?
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
}

model Product{
  id                   String               @id @default(uuid())
  product_name         String
  product_description  String?
  price                Int
  stock                Int
  image                String?
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime             @updatedAt
  orderItems           OrderItemsSchema[]
  userId               String               @unique
  user                 User                 @relation(fields: [userId], references: [id])
  category             String 
  Category             Category             @relation(fields: [category], references: [id])
}

model Category{
  id          String     @id @default(uuid())
  name        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  product     Product[]
} 

model OrderItemsSchema{
  id          String     @id @default(uuid()) 
  productId   String 
  product     Product    @relation(fields: [productId], references: [id])
  quantity    Int
  order      Order?      @relation(fields: [orderId], references: [id])
  orderId    String?
}
model Order{
  id          String              @id @default(uuid())
  userId      String
  user        User                @relation(fields: [userId], references: [id])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  status      OrederStatus        @default(Pending)
  orderItems  OrderItemsSchema[]
}



